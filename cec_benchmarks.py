import pandas
import numpy
import os

#TODO: Natural Gas per square foot, electricity per square foot, emissions per square foot
#Graphs: By building type

input_dir = 'inputs/cec_benchmarks/'
clients = pandas.read_csv('inputs/common/clients.csv')
zip_corrections = pandas.read_csv('inputs/cec_benchmarks/corrected_zips.csv')
data = [i for i in os.listdir(input_dir) if i.endswith('.xlsx')] #We don't want to pick up the corrected_zips.csv.

index_cols = ['Client Name','Year','all_electric'] #,'ZIP_CODE'] 
kbtu_cols = [
    'Natural Gas Use (kBtu)',
    'Electricity Use - Grid Purchase (kBtu)',
    'Electricity Use – Generated from Onsite Renewable Systems and Used Onsite (kBtu)',
    'Fuel Oil #2 Use (kBtu)',
    'District Steam Use (kBtu)',
    'Diesel #2 Use (kBtu)',
    'Propane Use (kBtu)',
    'District Hot Water Use (kBtu)',
    'District Chilled Water Use (kBtu)'
]
other_numeric_cols = [
    'Total (Location-Based) GHG Emissions (Metric Tons CO2e)',
    'Property GFA - Calculated (Buildings) (ft²)',
    'Total Energy Use (kBtu)' #This column does not appear in the raw data, is generated by this script.
    ]
all_numeric_cols = kbtu_cols + other_numeric_cols

fossil_cols = [
    'Fuel Oil #2 Use (kBtu)',
    'District Steam Use (kBtu)',
    'Diesel #2 Use (kBtu)',
    'Propane Use (kBtu)',
    'District Hot Water Use (kBtu)',
    'Natural Gas Use (kBtu)'
]




df = pandas.DataFrame()
for i in data:
    print(i)
    temp = pandas.read_excel(input_dir+i,skiprows=2)
    temp['Year'] = i[0:4]
    temp = temp.merge(right=zip_corrections,on='Portfolio Manager Property ID',how='left',copy=True,indicator=True) #Correct bad postal codes
    temp['Postal Code'] = numpy.where(temp['_merge']=='both', temp['Corrected zip'],temp['Postal Code'])
    assert 'Postal Code' in temp.columns,'ERROR: Header is not where expected. Double-check source data: '+i
    temp['Postal Code'] = temp['Postal Code'].astype(str).str.strip().str.slice(stop=5)
    assert temp['Postal Code'].astype(str).str.match(r'^\d{5}$').all(),'Zip code not parsed properly'
    temp['Postal Code'] = temp['Postal Code'].astype(int)    
    assert temp['Postal Code'].notnull().any(),'Bad Zip code data'
    temp = temp.merge(right = clients,how='inner',left_on = 'Postal Code', right_on = 'ZIP_CODE',copy=True)
    kbtu_cols = [i for i in temp.columns if '(kBtu)' in i]
    temp['Total Energy Use (kBtu)'] = temp[kbtu_cols].sum(axis=1) 
    df = pandas.concat([df,temp])
    
#Data cleaning
df = df[df['Electricity Use - Grid Purchase (kBtu)'].notnull()] #Drop obs with missing electricity data 
for i in all_numeric_cols:
    df[i].fillna(0,inplace=True) #Fill NAs with zero. Assume if there is no natural gas data, building is electrically heated
df = df[df['Weather Normalized Site EUI (kBtu/ft²)']<10000] #Drop outliers. No building should have EUI this high.

df['total_fossil_kBtu'] = df[fossil_cols].sum(axis=1)
df['all_electric'] = numpy.where(df['total_fossil_kBtu']==0,True,False)

df.to_csv('check_me.csv')

#Pivot - check to make sure no data was dropped with the assert
piv = pandas.pivot_table(df,index=index_cols,values=all_numeric_cols,aggfunc=sum)
piv.reset_index(inplace=True)
for i in all_numeric_cols:
    print('Checking data integrity for '+i+str(df[i].sum())+' '+str(piv[i].sum()))
    assert round(df[i].sum(),2)==round(piv[i].sum(),2),'Something went wrong with the pivot summing. Check for missing values.'

piv['kWh per square foot per year'] = 0.293071 * piv['Electricity Use - Grid Purchase (kBtu)'] / piv['Property GFA - Calculated (Buildings) (ft²)']
piv['therms per square foot per year'] = 0.0100024*piv['Natural Gas Use (kBtu)'] / piv['Property GFA - Calculated (Buildings) (ft²)']
piv['kBtu per square foot per year'] = piv['Total Energy Use (kBtu)'] / piv['Property GFA - Calculated (Buildings) (ft²)']

piv.to_csv('haunt.csv',index=False)